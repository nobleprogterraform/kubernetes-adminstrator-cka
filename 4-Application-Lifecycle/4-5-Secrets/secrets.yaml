# echo -n "mysql" | base64
# echo -n "root" | base64
# echo -n "paswrd"| base64

apiVersion: v1
kind: ConfigMap
metadata:
 name: app-config
data:
  DB_Host: bX1zcWw=
  DB_User: cm9vdA==
  DB_Password: cGFzd3Jk

# kubectl describe secret app-config
# kubectl get secret app-config -o yaml
# echo -n "bX1zcWw=" | base64 --decode


Configuring secrets in application:
- The ConfigMap stores configuration data in plain text format  not the right place to store a password.
- Secrets are used to store sensitive information like passwords or keys. They're similar to ConfigMaps
	except that they're stored in an encoded format.

- to encode in linux: echo -n "mysql" | base64
- to decode in linux: echo -n "dfhkhdk" | base64 --decode

- imparative ways to create secrets: kubectl create secret generic app-secret --from-literal=DB_HOS=mysql
- declarative way: apiVersion: v1, kind: Secret, metadata:, data: DB_HOST: mysql (in enocdded form)

- kubectl get secrets
- kubectl describe secret app-secret -o yaml
	
	
- note that secrets are not encrypted. They're only encoded, meaning anyone can decode them if they can see secret.
- So remember not to check in your secret definition files along with your code

- consider third party secret provider, such as AWS provider or Azure provider or GCP provider or the vault provider.
This way, the secrets are stored not in etcd but in external secret provider,and that those providers takes care of
most of the security

- The concept of safety of the Secrets is a bit confusing in Kubernetes. The kubernetes documentation page and a lot of
blogs out there 
refer to secrets as a "safer option" to store sensitive data. They are safer than storing in plain text as 
they reduce the risk of 
accidentally exposing passwords and other sensitive data. In my opinion it's not the secret itself that is safe,
it is the practices 
around it

- Also the way kubernetes handles secrets. Such as:
A secret is only sent to a node if a pod on that node requires it.
Once the Pod that depends on the secret is deleted, kubelet will delete its local copy of the secret data as well
