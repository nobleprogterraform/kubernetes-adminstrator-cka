FROM Ubuntu
CMD sleep 5

docker build -t ubuntu-sleeper

FROM Ubuntu
ENTRYPOINT ["sleep"]
CMD ["5"]

apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper-pod
spec:
 containers:
 - name: ubuntu-sleeper
   image: ubuntu-sleeper
   command: ["sleep"]
   args: ["10"]

# cat /etc/kubernetes/manifests/kube-apiserver.yaml


Commands And Aruguments in POD definition
- Let's first refresh our memory on commands on containers. We will then translate this into pods.
-  we will look at commands, arguments, and entry points

- Unlike virtual machines, containers are not meant to host an operating system. Containers are meant to run a specific task
or process, such as to host an instance of a web server or application server or a database, or simply to carry out some computation 
or analysis. Once the task is complete, the container exits. A container only lives as long as the process inside it is alive
If the web service inside the container is stopped or crashes, the container exits
- So who defines what process is run within the container? If you look at the Docker file for popular Docker images,
like NGINX, you will see an instruction called CMD, which stands for command, that defines the program. CMD["ngnix"]

- If you want a command to run permanently then you create your own image from the base Ubuntu image
	eg. FROM ubuntu
		CMD sleep 5 (or CMD ["sleep","5"])
	docker build -t ubuntu-sleeper
	docker run ubuntu-sleeper


- The entry point instruction is like the command instruction,
 if you want to have default value of seconds then you use both ENTRYPOINT and CMD. docker run ubuntu-sleeper 
	FROM ubuntu
	ENTRYPOINT ["sleep"]
	CMD ["5"]
