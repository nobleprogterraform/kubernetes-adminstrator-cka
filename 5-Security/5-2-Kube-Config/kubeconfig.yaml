kubectl config view

cat .kube/config


Kube Config
-  CURL request to the address of the kube-apiserver while passing in the  files, along with the CA certificate as options
	curl https://my-kube-playground:6443/api/v1/pods --key admin.key --cert admin.crt --cacert ca.crt
	This is a valid API server to authenticate the user while making api-server call. You can specify the same information
	using while using the kubectl command as well but Obviously, typing those in every time is a tedious task
- So you can move this information to a configuration file called as kubeconfig. And then specify this file
	as the kubeconfig option in your command. kubectl get pods --kubeconfig config
	By default, the kubectl tool looks for a file named config under a directory .kube under the user's home directory ($HOME/.kube/config)
- The config file has three sections: clusters, users, and contexts
	Clusters are the various Kubernetes clusters that you need access to. Say you have multiple clusters for development environment
	or testing environment or prod.
	Users are the user accounts with which you have access to these clusters. For example, the admin user, a dev user,
	a prod user, et cetera. These users may have different privileges on different clusters.
	Finally, contexts marry these together. Contexts define which user account will be used to access which cluster.
	For example, you could create a context named admin@production that will use the admin account to access a production cluster.
- Remember, you're not creating any new users or configuring any kind of user access or authorization in the cluster with this process.
	You're using existing users with their existing privileges and defining what user you're going to use to access what cluster.
	That way you don't have to specify the user certificates and server address in each and every kubectl command you run.

- Follow the same procedure to add all the clusters, users and contexts as these fields are array. 
	For kube config file, remember, you don't have to create any object, like you do for other kube objects.
	The file is left as is and is read by the kubectl command. how does kubectl know which context to choose from.
	You can specify the default context used by adding a field current context to the kubeconfig file
- There are command line options available within kubectl to view and modify the kubeconfig files.
	kubectl config view (to view config,at default location, file being used), kubectl config view --kubeconfig=my-custom-config
- So how do you update your current context? kubectl config use-context prod-user@production
	This will also update the currentContext field value in config file as well. kubectl config current-context (to see current context)
- What about namespaces? For example, each cluster may be configured with multiple namespaces within it.
	You can configure a context to switch to a particular namespace when you switch to that context. 
