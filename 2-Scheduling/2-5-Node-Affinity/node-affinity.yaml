# kubectl label nodes node01 size=Large
# kubectl label nodes node02 size=Medium

apiVersion: v1
kind: Pod
metadata:
 name: myapp-pod
spec:
 containers:
 - name: nginx-container
   image: nginx
 affinity:
   nodeAffinity:
     requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: size
            operator: NotIn
            values: 
            - Small
            - Medium


Node Affinity
	- We cannot provide advanced expressions like "or" or not with node selectors. The node affinity feature provides us with advanced capabilities
		to limit pod placement on specific nodes.
	- spec:
		affinity:
			nodeAffinity:
				requiredDuringSchedulingIgnoredDuringExecution:
					nodeSelectorTerms:
						- matchExpressions:
							- key: size
							  Operator: In (or NotIn, Exists with no values, 
							  values:
								- Large
								- Medium
	- But what if node affinity could not match a node with a given expression? In this case, what if there are no nodes
		with the label called size? Say we had the labels and the pods are scheduled. What if someone changes the label on the node
		at a future point in time. All of this is answered by the long sentence like property under node affinity
	- There are currently two types of node affinity available,
		requiredDuringSchedulingIgnoredDuringExecution and
		preferredDuringSchedulingIgnoredDuringExecution
	- For required type if a matching node is not found, pod is not specheduled 
	- For preferred type if a matching node is not found, pod is scheduled on any node availabel
	- Ignored during execution means if a label is changed on a node after pod has been scheduled then there will be not changes made on pod


 Taints & Tolerations with Node Affinity
	- If we have 3 nodes and 3 pods that we want to have 1:1 mapping between pods and nodes (without impacting other nodes and pods in same 
		cluster) then in such usecase we can combine both Taints-Tolerations with NodeAffinity. 
	- Taints-Tolerations will not allow other pods in cluster to be scheduled on nodes and NodeAffinity will force our pods to be scheduled 
		in our specified 3 nodes only.



The best way to describe the difference between **taint tolerations** and **node affinity** is to focus on their purpose and how they influence pod scheduling in Kubernetes:

### **Taints and Tolerations:**
- **Purpose:** Taints and tolerations work together to **control where Pods can be scheduled** on nodes by marking nodes with certain restrictions (taints) and allowing specific Pods to "tolerate" those restrictions.
- **Taints:** A taint is applied to a node, and it marks the node as having a specific condition that would normally prevent Pods from being scheduled there. For example, a taint could indicate that only certain types of workloads should be scheduled on that node.
- **Tolerations:** Tolerations are applied to Pods, allowing them to be scheduled on nodes with matching taints. A toleration does not prevent a Pod from being scheduled on a tainted node but instead allows the Pod to "tolerate" the taint and still be scheduled there.

   **Example:**  
   - A node is tainted with `key=value:NoSchedule`, meaning Pods cannot be scheduled unless they tolerate this taint.  
   - A Pod can tolerate this taint by adding a matching toleration to its spec, allowing it to be scheduled on that node.

### **Node Affinity:**
- **Purpose:** Node affinity is used to **express rules about which nodes a Pod should be scheduled on** based on node labels. It provides more flexibility in selecting nodes by defining preferences or strict requirements.
- **Node Affinity:** Node affinity allows you to specify that a Pod should only be scheduled on nodes with certain labels. It has two types:  
   - **requiredDuringSchedulingIgnoredDuringExecution:** A hard requirement that the Pod **must** be scheduled on a node with matching labels.
   - **preferredDuringSchedulingIgnoredDuringExecution:** A preference, where the scheduler will try to schedule the Pod on a node with matching labels, but itâ€™s not a strict requirement.

   **Example:**  
   - A Pod with node affinity might require that it be scheduled only on nodes labeled `region=us-east`. The Pod will be scheduled on any node with that label, provided there are available resources.

### **Key Differences:**
- **Taints and Tolerations:** Focus on preventing Pods from being scheduled on certain nodes unless they specifically tolerate a condition.
- **Node Affinity:** Focuses on selecting nodes for scheduling based on labels, allowing more control over where Pods should be placed.

**In short:**  
- **Taints and tolerations** are about **restricting Pods** from nodes unless they "tolerate" the taint.
- **Node affinity** is about **placing Pods on specific nodes** based on node labels.