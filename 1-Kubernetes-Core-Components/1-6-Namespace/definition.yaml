# kubectl create namespace dev

apiVersion: v1
kind: Namespace
metadata:
  name: dev

	

#kubectl create -f ns-definition.yaml --namespace=dev


cat << EOF | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  namespace: dev
  labels:
    app: myapp
    type: front-end
spec:
  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp
        type: front-end
    spec:
      containers:
      - name: nginx-container
        image: nginx
  replicas: 3
  selector:
    matchLabels:
      type: front-end
EOF

Namespace
	- So far we have created objects such as pods, deployments, and services in our cluster.
		we have been doing all this within a name space.This name space is known as the default name space
		and it is created automatically by Kubernetes when the cluster is first set up.
	- Kubernetes creates a set of pods and services for its internal purpose, such as those required by the networking solution,
		the DNS service, etcetera. To isolate these from the user and to prevent you from accidentally deleting 
		or modifying these services, Kubernetes creates them under another name space created at cluster startup named kube-system
	- A third name space created by Kubernetes automatically is called kube-public. This is where resources
		that should be made available to all users are create
	- One example of using a namespace is if you wanted to use the same cluster for both dev and production environment,
		but at the same time, isolate the resources between them, you can create a different name space for each of them.
		That way, while working in the dev environment,you don't accidentally modify resources in production
	- You can also assign quota of resources to each of these name spaces. That way, each name space is guaranteed a certain amount
		and does not use more than its allowed limit
	- the resources within a name space can refer to each other simply by their names. To reach a service in another name space,
		you must append the name of the namespace to the name of the service.
		For example, for the web pod in the default name space to connect to the database in the dev environment or namespace,
		use the servicename.namespace.svc.cluster.local format
		dbservice.dev.svc.cluster.local When a service is created a DNS entry is added automatically in this format
	- cluster.local is the default domain name of the Kubernetes cluster and SVC is the sub domain for service
	- To list pods in another name space kubectl get pods --namespace=kube-system
	- kubectl create -f pod-def.yaml --namespace=dev or put namespace: dev in pod-def.yaml under metadata section 
	- To create a new namespace create definition file with apiVersion:v1, kind:Namespace, metadata: Name:dev
		or by running command kubectl create namespace dev 
	- To switch namespace to dev
	kubectl config set-context --current --namespace=dev
	- To view pods in all namespaces, kubectl get pods --all-namespaces
	- To limit resources in a namespace, create a resource quota using yaml definition file
		apiVersion: v1, kind: ResourceQuota, spec: hard: pods: "10" requests.cpu: "4" requests.memory:5Gi limits.cpu:"10"
		limits.memory: 10Gi



---

### 1. **What is the purpose of namespaces in Kubernetes?**
   **Answer**: Namespaces in Kubernetes provide a way to organize and isolate resources within a cluster. They allow for separation of environments (e.g., dev, staging, prod) and help manage access, resource quotas, and policies for different groups or applications within the same cluster.

---

### 2. **Can you explain the default namespaces created by Kubernetes?**
   **Answer**: Kubernetes automatically creates three namespaces:  
   - **default**: For user-defined resources.  
   - **kube-system**: For internal Kubernetes components (e.g., networking, DNS).  
   - **kube-public**: For resources that need to be available to all users within the cluster.

---



### 5. **What happens when two services with the same name are created in different namespaces?**
   **Answer**: If two services have the same name but are in different namespaces, they are still considered separate resources. You can access them using the format `<service-name>.<namespace>.svc.cluster.local`, which uniquely identifies the service within the namespace.

---

### 6. **How do you limit resource usage within a namespace?**
   **Answer**: You can limit resource usage in a namespace by creating a **ResourceQuota**. The quota specifies limits on the number of resources (e.g., pods, CPU, memory) that can be consumed within the namespace. This is defined in a YAML file and applied via `kubectl create -f resource-quota.yaml`.

---



### 8. **How do you access a service in another namespace?**
   **Answer**: To access a service in another namespace, append the namespace to the service name using the format `servicename.namespace.svc.cluster.local`. For example, `dbservice.dev.svc.cluster.local` allows a pod in the default namespace to reach a service named `dbservice` in the `dev` namespace.

---

### 9. **What is the significance of the `cluster.local` suffix in Kubernetes DNS?**
   **Answer**: The `cluster.local` suffix is the default domain name for the Kubernetes cluster. It is used in service DNS names to fully qualify them within the cluster. For example, `dbservice.dev.svc.cluster.local` uniquely identifies a service named `dbservice` in the `dev` namespace.

---

### 10. **Can you permanently set a namespace for a specific user or environment?**
   **Answer**: Yes, you can permanently set a namespace for a specific environment by modifying the context with the `kubectl config set-context` command. This ensures that all subsequent `kubectl` commands will operate in the specified namespace without needing to specify it each time.

